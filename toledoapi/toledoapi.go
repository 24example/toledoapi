// Code generated by gowsdl DO NOT EDIT.

package toledoapi

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

type Test struct {
	XMLName xml.Name `xml:"http://www.toledo24.ru/webservices/ToledoAPI Test"`
}

type TestResponse struct {
	XMLName xml.Name `xml:"http://www.toledo24.ru/webservices/ToledoAPI TestResponse"`

	Return_ string `xml:"return,omitempty" json:"return,omitempty"`
}

type ProductsGroupHierarchy struct {
	XMLName xml.Name `xml:"http://www.toledo24.ru/webservices/ToledoAPI ProductsGroupHierarchy"`

	APIKey string `xml:"APIKey,omitempty" json:"APIKey,omitempty"`
}

type ProductsGroupHierarchyResponse struct {
	XMLName xml.Name `xml:"http://www.toledo24.ru/webservices/ToledoAPI ProductsGroupHierarchyResponse"`

	Return_ string `xml:"return,omitempty" json:"return,omitempty"`
}

type Brands struct {
	XMLName xml.Name `xml:"http://www.toledo24.ru/webservices/ToledoAPI Brands"`

	APIKey string `xml:"APIKey,omitempty" json:"APIKey,omitempty"`
}

type BrandsResponse struct {
	XMLName xml.Name `xml:"http://www.toledo24.ru/webservices/ToledoAPI BrandsResponse"`

	Return_ string `xml:"return,omitempty" json:"return,omitempty"`
}

type ProductsInfo struct {
	XMLName xml.Name `xml:"http://www.toledo24.ru/webservices/ToledoAPI ProductsInfo"`

	APIKey string `xml:"APIKey,omitempty" json:"APIKey,omitempty"`

	Filter *string `xml:"Filter,omitempty" json:"Filter,omitempty"`

	PreviousProduct *string `xml:"PreviousProduct,omitempty" json:"PreviousProduct,omitempty"`
}

type ProductsInfoResponse struct {
	XMLName xml.Name `xml:"http://www.toledo24.ru/webservices/ToledoAPI ProductsInfoResponse"`

	Return_ string `xml:"return,omitempty" json:"return,omitempty"`
}

type PriceList struct {
	XMLName xml.Name `xml:"http://www.toledo24.ru/webservices/ToledoAPI PriceList"`

	APIKey string `xml:"APIKey,omitempty" json:"APIKey,omitempty"`

	Filter *string `xml:"Filter,omitempty" json:"Filter,omitempty"`

	PreviousProduct *string `xml:"PreviousProduct,omitempty" json:"PreviousProduct,omitempty"`

	OnlyPrice *bool `xml:"OnlyPrice,omitempty" json:"OnlyPrice,omitempty"`
}

type PriceListResponse struct {
	XMLName xml.Name `xml:"http://www.toledo24.ru/webservices/ToledoAPI PriceListResponse"`

	Return_ string `xml:"return,omitempty" json:"return,omitempty"`
}

type GetSalesDocumentsInfo struct {
	XMLName xml.Name `xml:"http://www.toledo24.ru/webservices/ToledoAPI GetSalesDocumentsInfo"`

	APIKey string `xml:"APIKey,omitempty" json:"APIKey,omitempty"`

	Filter *string `xml:"Filter,omitempty" json:"Filter,omitempty"`
}

type GetSalesDocumentsInfoResponse struct {
	XMLName xml.Name `xml:"http://www.toledo24.ru/webservices/ToledoAPI GetSalesDocumentsInfoResponse"`

	Return_ string `xml:"return,omitempty" json:"return,omitempty"`
}

type CreateOrderDocument struct {
	XMLName xml.Name `xml:"http://www.toledo24.ru/webservices/ToledoAPI CreateOrderDocument"`

	APIKey string `xml:"APIKey,omitempty" json:"APIKey,omitempty"`

	Filter string `xml:"Filter,omitempty" json:"Filter,omitempty"`
}

type CreateOrderDocumentResponse struct {
	XMLName xml.Name `xml:"http://www.toledo24.ru/webservices/ToledoAPI CreateOrderDocumentResponse"`

	Return_ string `xml:"return,omitempty" json:"return,omitempty"`
}

type GetOrderDocument struct {
	XMLName xml.Name `xml:"http://www.toledo24.ru/webservices/ToledoAPI GetOrderDocument"`

	APIKey string `xml:"APIKey,omitempty" json:"APIKey,omitempty"`

	Filter string `xml:"Filter,omitempty" json:"Filter,omitempty"`
}

type GetOrderDocumentResponse struct {
	XMLName xml.Name `xml:"http://www.toledo24.ru/webservices/ToledoAPI GetOrderDocumentResponse"`

	Return_ string `xml:"return,omitempty" json:"return,omitempty"`
}

type ChangeOrderDocument struct {
	XMLName xml.Name `xml:"http://www.toledo24.ru/webservices/ToledoAPI ChangeOrderDocument"`

	APIKey string `xml:"APIKey,omitempty" json:"APIKey,omitempty"`

	Filter string `xml:"Filter,omitempty" json:"Filter,omitempty"`
}

type ChangeOrderDocumentResponse struct {
	XMLName xml.Name `xml:"http://www.toledo24.ru/webservices/ToledoAPI ChangeOrderDocumentResponse"`

	Return_ string `xml:"return,omitempty" json:"return,omitempty"`
}

type GetAddressInfo struct {
	XMLName xml.Name `xml:"http://www.toledo24.ru/webservices/ToledoAPI GetAddressInfo"`

	APIKey string `xml:"APIKey,omitempty" json:"APIKey,omitempty"`
}

type GetAddressInfoResponse struct {
	XMLName xml.Name `xml:"http://www.toledo24.ru/webservices/ToledoAPI GetAddressInfoResponse"`

	Return_ string `xml:"return,omitempty" json:"return,omitempty"`
}

type ReconciliationAct struct {
	XMLName xml.Name `xml:"http://www.toledo24.ru/webservices/ToledoAPI ReconciliationAct"`

	APIKey string `xml:"APIKey,omitempty" json:"APIKey,omitempty"`

	Filter string `xml:"Filter,omitempty" json:"Filter,omitempty"`
}

type ReconciliationActResponse struct {
	XMLName xml.Name `xml:"http://www.toledo24.ru/webservices/ToledoAPI ReconciliationActResponse"`

	Return_ string `xml:"return,omitempty" json:"return,omitempty"`
}

type GetPriceRRP struct {
	XMLName xml.Name `xml:"http://www.toledo24.ru/webservices/ToledoAPI GetPriceRRP"`

	APIKey string `xml:"APIKey,omitempty" json:"APIKey,omitempty"`

	Filter *string `xml:"Filter,omitempty" json:"Filter,omitempty"`

	PreviousProduct *string `xml:"PreviousProduct,omitempty" json:"PreviousProduct,omitempty"`
}

type GetPriceRRPResponse struct {
	XMLName xml.Name `xml:"http://www.toledo24.ru/webservices/ToledoAPI GetPriceRRPResponse"`

	Return_ string `xml:"return,omitempty" json:"return,omitempty"`
}

type AddressInfo struct {
	AddressCode *string `xml:"AddressCode,omitempty" json:"AddressCode,omitempty"`

	AddressName *string `xml:"AddressName,omitempty" json:"AddressName,omitempty"`
}

type Analog struct {
	ProductId string `xml:"ProductId,omitempty" json:"ProductId,omitempty"`

	Name string `xml:"Name,omitempty" json:"Name,omitempty"`

	CharacteristicId *string `xml:"CharacteristicId,omitempty" json:"CharacteristicId,omitempty"`

	CharacteristicName *string `xml:"CharacteristicName,omitempty" json:"CharacteristicName,omitempty"`

	Article string `xml:"Article,omitempty" json:"Article,omitempty"`

	Brand string `xml:"Brand,omitempty" json:"Brand,omitempty"`

	BrandId string `xml:"BrandId,omitempty" json:"BrandId,omitempty"`
}

type BrandInfo struct {
	Id string `xml:"Id,omitempty" json:"Id,omitempty"`

	Name string `xml:"Name,omitempty" json:"Name,omitempty"`
}

type Contract struct {
	Name string `xml:"Name,omitempty" json:"Name,omitempty"`

	UID string `xml:"UID,omitempty" json:"UID,omitempty"`
}

type DocumentFilter struct {
	Number *string `xml:"Number,omitempty" json:"Number,omitempty"`

	StartDate soap.XSDDateTime `xml:"StartDate,omitempty" json:"StartDate,omitempty"`

	EndDate *soap.XSDDateTime `xml:"EndDate,omitempty" json:"EndDate,omitempty"`
}

type DocumentInfo struct {
	Number string `xml:"Number,omitempty" json:"Number,omitempty"`

	Date soap.XSDDateTime `xml:"Date,omitempty" json:"Date,omitempty"`

	Organization string `xml:"Organization,omitempty" json:"Organization,omitempty"`

	TotalAmount float32 `xml:"TotalAmount,omitempty" json:"TotalAmount,omitempty"`

	Status *string `xml:"Status,omitempty" json:"Status,omitempty"`

	Products struct {
		Row []struct {
			ProductId string `xml:"ProductId,omitempty" json:"ProductId,omitempty"`

			ProductName string `xml:"ProductName,omitempty" json:"ProductName,omitempty"`

			CharacteristicId *string `xml:"CharacteristicId,omitempty" json:"CharacteristicId,omitempty"`

			CharacteristicName *string `xml:"CharacteristicName,omitempty" json:"CharacteristicName,omitempty"`

			GTD *string `xml:"GTD,omitempty" json:"GTD,omitempty"`

			Country *string `xml:"Country,omitempty" json:"Country,omitempty"`

			Unit string `xml:"Unit,omitempty" json:"Unit,omitempty"`

			Quantity float32 `xml:"Quantity,omitempty" json:"Quantity,omitempty"`

			Price float32 `xml:"Price,omitempty" json:"Price,omitempty"`

			Amount float32 `xml:"Amount,omitempty" json:"Amount,omitempty"`

			VAT_Rate string `xml:"VAT_Rate,omitempty" json:"VAT_Rate,omitempty"`

			VAT_Amount float32 `xml:"VAT_Amount,omitempty" json:"VAT_Amount,omitempty"`

			Multiplicity float32 `xml:"Multiplicity,omitempty" json:"Multiplicity,omitempty"`

			OrderNumber string `xml:"OrderNumber,omitempty" json:"OrderNumber,omitempty"`
		} `xml:"row,omitempty" json:"row,omitempty"`
	} `xml:"Products,omitempty" json:"Products,omitempty"`

	Services struct {
		Row []struct {
			ProductId string `xml:"ProductId,omitempty" json:"ProductId,omitempty"`

			ProductName string `xml:"ProductName,omitempty" json:"ProductName,omitempty"`

			CharacteristicId *string `xml:"CharacteristicId,omitempty" json:"CharacteristicId,omitempty"`

			CharacteristicName *string `xml:"CharacteristicName,omitempty" json:"CharacteristicName,omitempty"`

			Content string `xml:"Content,omitempty" json:"Content,omitempty"`

			Quantity float32 `xml:"Quantity,omitempty" json:"Quantity,omitempty"`

			Price float32 `xml:"Price,omitempty" json:"Price,omitempty"`

			Amount float32 `xml:"Amount,omitempty" json:"Amount,omitempty"`

			VAT_Rate string `xml:"VAT_Rate,omitempty" json:"VAT_Rate,omitempty"`

			VAT_Amount float32 `xml:"VAT_Amount,omitempty" json:"VAT_Amount,omitempty"`
		} `xml:"row,omitempty" json:"row,omitempty"`
	} `xml:"Services,omitempty" json:"Services,omitempty"`
}

type ExpectedReceiptReport struct {
	Records []struct {
		Document string `xml:"Document,omitempty" json:"Document,omitempty"`

		DocumentId *string `xml:"DocumentId,omitempty" json:"DocumentId,omitempty"`

		ProductName string `xml:"ProductName,omitempty" json:"ProductName,omitempty"`

		ProductId string `xml:"ProductId,omitempty" json:"ProductId,omitempty"`

		Quantity float32 `xml:"Quantity,omitempty" json:"Quantity,omitempty"`
	} `xml:"Records,omitempty" json:"Records,omitempty"`
}

type Feature struct {
	FeatureId string `xml:"FeatureId,omitempty" json:"FeatureId,omitempty"`

	Description string `xml:"Description,omitempty" json:"Description,omitempty"`

	Value string `xml:"Value,omitempty" json:"Value,omitempty"`

	ValueType string `xml:"ValueType,omitempty" json:"ValueType,omitempty"`
}

type ForthcomingPayments struct {
	Contracts []struct {
		Contract *Contract `xml:"Contract,omitempty" json:"Contract,omitempty"`

		Debt float32 `xml:"Debt,omitempty" json:"Debt,omitempty"`

		OverdueDebt float32 `xml:"OverdueDebt,omitempty" json:"OverdueDebt,omitempty"`

		PaymentDueDate soap.XSDDateTime `xml:"PaymentDueDate,omitempty" json:"PaymentDueDate,omitempty"`

		DaysPastDue float32 `xml:"DaysPastDue,omitempty" json:"DaysPastDue,omitempty"`

		Records []struct {
			Date soap.XSDDateTime `xml:"Date,omitempty" json:"Date,omitempty"`

			Document string `xml:"Document,omitempty" json:"Document,omitempty"`

			PaymentDueDate soap.XSDDateTime `xml:"PaymentDueDate,omitempty" json:"PaymentDueDate,omitempty"`

			DaysPastDue float32 `xml:"DaysPastDue,omitempty" json:"DaysPastDue,omitempty"`

			Debt float32 `xml:"Debt,omitempty" json:"Debt,omitempty"`

			OverdueDebt float32 `xml:"OverdueDebt,omitempty" json:"OverdueDebt,omitempty"`
		} `xml:"Records,omitempty" json:"Records,omitempty"`
	} `xml:"Contracts,omitempty" json:"Contracts,omitempty"`
}

type OrderDetails struct {
	ProductsToOrder []*ProductsToOrder `xml:"ProductsToOrder,omitempty" json:"ProductsToOrder,omitempty"`

	AddressCode *string `xml:"AddressCode,omitempty" json:"AddressCode,omitempty"`

	DeliveryDate *soap.XSDDateTime `xml:"DeliveryDate,omitempty" json:"DeliveryDate,omitempty"`

	ConfirmOrder *bool `xml:"ConfirmOrder,omitempty" json:"ConfirmOrder,omitempty"`

	Comment *string `xml:"Comment,omitempty" json:"Comment,omitempty"`

	Number *string `xml:"Number,omitempty" json:"Number,omitempty"`

	Date *soap.XSDDateTime `xml:"Date,omitempty" json:"Date,omitempty"`
}

type OrderFilter struct {
	Number *string `xml:"Number,omitempty" json:"Number,omitempty"`

	StartDate soap.XSDDateTime `xml:"StartDate,omitempty" json:"StartDate,omitempty"`

	EndDate *soap.XSDDateTime `xml:"EndDate,omitempty" json:"EndDate,omitempty"`
}

type OrderInfo struct {
	Number string `xml:"Number,omitempty" json:"Number,omitempty"`

	Date *soap.XSDDateTime `xml:"Date,omitempty" json:"Date,omitempty"`

	Organization string `xml:"Organization,omitempty" json:"Organization,omitempty"`

	TotalAmount float32 `xml:"TotalAmount,omitempty" json:"TotalAmount,omitempty"`

	Comment string `xml:"Comment,omitempty" json:"Comment,omitempty"`

	OrderStatus string `xml:"OrderStatus,omitempty" json:"OrderStatus,omitempty"`

	SalesDocumentNumbers *string `xml:"SalesDocumentNumbers,omitempty" json:"SalesDocumentNumbers,omitempty"`

	Products struct {
		Row []struct {
			ProductId string `xml:"ProductId,omitempty" json:"ProductId,omitempty"`

			ProductName *string `xml:"ProductName,omitempty" json:"ProductName,omitempty"`

			CharacteristicId *string `xml:"CharacteristicId,omitempty" json:"CharacteristicId,omitempty"`

			CharacteristicName *string `xml:"CharacteristicName,omitempty" json:"CharacteristicName,omitempty"`

			Content string `xml:"Content,omitempty" json:"Content,omitempty"`

			Quantity float32 `xml:"Quantity,omitempty" json:"Quantity,omitempty"`

			Price float32 `xml:"Price,omitempty" json:"Price,omitempty"`

			Amount float32 `xml:"Amount,omitempty" json:"Amount,omitempty"`

			VAT_Rate string `xml:"VAT_Rate,omitempty" json:"VAT_Rate,omitempty"`

			VAT_Amount float32 `xml:"VAT_Amount,omitempty" json:"VAT_Amount,omitempty"`
		} `xml:"row,omitempty" json:"row,omitempty"`
	} `xml:"Products,omitempty" json:"Products,omitempty"`

	Services struct {
		Row []struct {
			ProductId string `xml:"ProductId,omitempty" json:"ProductId,omitempty"`

			ProductName *string `xml:"ProductName,omitempty" json:"ProductName,omitempty"`

			CharacteristicId *string `xml:"CharacteristicId,omitempty" json:"CharacteristicId,omitempty"`

			CharacteristicName *string `xml:"CharacteristicName,omitempty" json:"CharacteristicName,omitempty"`

			Content string `xml:"Content,omitempty" json:"Content,omitempty"`

			Unit string `xml:"Unit,omitempty" json:"Unit,omitempty"`

			Quantity float32 `xml:"Quantity,omitempty" json:"Quantity,omitempty"`
		} `xml:"row,omitempty" json:"row,omitempty"`
	} `xml:"Services,omitempty" json:"Services,omitempty"`
}

type Partner struct {
	Name string `xml:"Name,omitempty" json:"Name,omitempty"`

	UID string `xml:"UID,omitempty" json:"UID,omitempty"`
}

type ProductPrice struct {
	ProductId string `xml:"ProductId,omitempty" json:"ProductId,omitempty"`

	Name string `xml:"Name,omitempty" json:"Name,omitempty"`

	Article *string `xml:"Article,omitempty" json:"Article,omitempty"`

	Brand *string `xml:"Brand,omitempty" json:"Brand,omitempty"`

	BrandId *string `xml:"BrandId,omitempty" json:"BrandId,omitempty"`

	CharacteristicId *string `xml:"CharacteristicId,omitempty" json:"CharacteristicId,omitempty"`

	CharacteristicName *string `xml:"CharacteristicName,omitempty" json:"CharacteristicName,omitempty"`

	Unit string `xml:"Unit,omitempty" json:"Unit,omitempty"`

	Price float32 `xml:"Price,omitempty" json:"Price,omitempty"`

	Balance float32 `xml:"Balance,omitempty" json:"Balance,omitempty"`

	Group string `xml:"Group,omitempty" json:"Group,omitempty"`

	GroupId *string `xml:"GroupId,omitempty" json:"GroupId,omitempty"`

	SupplierBalance float32 `xml:"SupplierBalance,omitempty" json:"SupplierBalance,omitempty"`

	OrderExecutionTime soap.XSDDate `xml:"OrderExecutionTime,omitempty" json:"OrderExecutionTime,omitempty"`

	DeletionMark bool `xml:"DeletionMark,omitempty" json:"DeletionMark,omitempty"`

	MinimumBalance float32 `xml:"MinimumBalance,omitempty" json:"MinimumBalance,omitempty"`
}

type ProductFilter struct {
	Brands []*string `xml:"Brands,omitempty" json:"Brands,omitempty"`

	Groups []*string `xml:"Groups,omitempty" json:"Groups,omitempty"`

	Products []*string `xml:"Products,omitempty" json:"Products,omitempty"`
}

type ProductGroupInfo struct {
	Name string `xml:"Name,omitempty" json:"Name,omitempty"`

	GroupId *string `xml:"GroupId,omitempty" json:"GroupId,omitempty"`

	ParentId *string `xml:"ParentId,omitempty" json:"ParentId,omitempty"`

	Level int32 `xml:"Level,omitempty" json:"Level,omitempty"`

	IndexNumber int32 `xml:"IndexNumber,omitempty" json:"IndexNumber,omitempty"`
}

type ProductInfo struct {
	ProductId string `xml:"ProductId,omitempty" json:"ProductId,omitempty"`

	DeletionMark bool `xml:"DeletionMark,omitempty" json:"DeletionMark,omitempty"`

	Article *string `xml:"Article,omitempty" json:"Article,omitempty"`

	Brand *string `xml:"Brand,omitempty" json:"Brand,omitempty"`

	BrandId *string `xml:"BrandId,omitempty" json:"BrandId,omitempty"`

	ShortName string `xml:"ShortName,omitempty" json:"ShortName,omitempty"`

	Name *string `xml:"Name,omitempty" json:"Name,omitempty"`

	CharacteristicId string `xml:"CharacteristicId,omitempty" json:"CharacteristicId,omitempty"`

	CharacteristicName *string `xml:"CharacteristicName,omitempty" json:"CharacteristicName,omitempty"`

	Unit string `xml:"Unit,omitempty" json:"Unit,omitempty"`

	GTD *string `xml:"GTD,omitempty" json:"GTD,omitempty"`

	Weight float32 `xml:"Weight,omitempty" json:"Weight,omitempty"`

	Volume float32 `xml:"Volume,omitempty" json:"Volume,omitempty"`

	Value float32 `xml:"Value,omitempty" json:"Value,omitempty"`

	Group string `xml:"Group,omitempty" json:"Group,omitempty"`

	GroupId *string `xml:"GroupId,omitempty" json:"GroupId,omitempty"`

	Multiplicity float32 `xml:"Multiplicity,omitempty" json:"Multiplicity,omitempty"`

	MinimalPackage float32 `xml:"MinimalPackage,omitempty" json:"MinimalPackage,omitempty"`

	Country *string `xml:"Country,omitempty" json:"Country,omitempty"`

	SuppliersMRP float32 `xml:"SuppliersMRP,omitempty" json:"SuppliersMRP,omitempty"`

	Class string `xml:"Class,omitempty" json:"Class,omitempty"`

	Description *string `xml:"Description,omitempty" json:"Description,omitempty"`

	Features []*Feature `xml:"Features,omitempty" json:"Features,omitempty"`

	Analogs []*Analog `xml:"Analogs,omitempty" json:"Analogs,omitempty"`

	Images []string `xml:"Images,omitempty" json:"Images,omitempty"`

	Barcode *string `xml:"Barcode,omitempty" json:"Barcode,omitempty"`

	CuttingProduct *string `xml:"CuttingProduct,omitempty" json:"CuttingProduct,omitempty"`

	ExternalName *string `xml:"ExternalName,omitempty" json:"ExternalName,omitempty"`
}

type ProductsToOrder struct {
	ProductId string `xml:"ProductId,omitempty" json:"ProductId,omitempty"`

	CharacteristicId *string `xml:"CharacteristicId,omitempty" json:"CharacteristicId,omitempty"`

	Quantity float32 `xml:"Quantity,omitempty" json:"Quantity,omitempty"`
}

type ReconciliationActFilter struct {
	StartDate soap.XSDDateTime `xml:"StartDate,omitempty" json:"StartDate,omitempty"`

	EndDate soap.XSDDateTime `xml:"EndDate,omitempty" json:"EndDate,omitempty"`
}

type ReconciliationActInfo struct {
	Partner *Partner `xml:"Partner,omitempty" json:"Partner,omitempty"`

	InitialBalance float32 `xml:"InitialBalance,omitempty" json:"InitialBalance,omitempty"`

	FinalBalance float32 `xml:"FinalBalance,omitempty" json:"FinalBalance,omitempty"`

	Contracts []struct {
		Contract *Contract `xml:"Contract,omitempty" json:"Contract,omitempty"`

		OverdueDebt float32 `xml:"OverdueDebt,omitempty" json:"OverdueDebt,omitempty"`

		InitialBalanceContract float32 `xml:"InitialBalanceContract,omitempty" json:"InitialBalanceContract,omitempty"`

		FinalBalanceContract float32 `xml:"FinalBalanceContract,omitempty" json:"FinalBalanceContract,omitempty"`

		Records []struct {
			Date soap.XSDDateTime `xml:"Date,omitempty" json:"Date,omitempty"`

			Document string `xml:"Document,omitempty" json:"Document,omitempty"`

			DocumentId *string `xml:"DocumentId,omitempty" json:"DocumentId,omitempty"`

			Debet float32 `xml:"Debet,omitempty" json:"Debet,omitempty"`

			Credit float32 `xml:"Credit,omitempty" json:"Credit,omitempty"`

			Balance float32 `xml:"Balance,omitempty" json:"Balance,omitempty"`
		} `xml:"Records,omitempty" json:"Records,omitempty"`
	} `xml:"Contracts,omitempty" json:"Contracts,omitempty"`
}

type ReservesReport struct {
	Records []struct {
		Date soap.XSDDateTime `xml:"Date,omitempty" json:"Date,omitempty"`

		Document string `xml:"Document,omitempty" json:"Document,omitempty"`

		DocumentId *string `xml:"DocumentId,omitempty" json:"DocumentId,omitempty"`

		ProductName string `xml:"ProductName,omitempty" json:"ProductName,omitempty"`

		ProductId string `xml:"ProductId,omitempty" json:"ProductId,omitempty"`

		Quantity float32 `xml:"Quantity,omitempty" json:"Quantity,omitempty"`
	} `xml:"Records,omitempty" json:"Records,omitempty"`
}

type Response struct {
	Error string `xml:"Error,omitempty" json:"Error,omitempty"`

	Objects []struct {
	} `xml:"Objects,omitempty" json:"Objects,omitempty"`

	LastObject struct {
	} `xml:"LastObject,omitempty" json:"LastObject,omitempty"`
}

type DocumentStatuses struct {
	Statuses []struct {
		Status string `xml:"Status,omitempty" json:"Status,omitempty"`

		Data soap.XSDDateTime `xml:"Data,omitempty" json:"Data,omitempty"`
	} `xml:"Statuses,omitempty" json:"Statuses,omitempty"`

	DeliveryDate *soap.XSDDateTime `xml:"DeliveryDate,omitempty" json:"DeliveryDate,omitempty"`

	Driver *string `xml:"Driver,omitempty" json:"Driver,omitempty"`

	DriverPhoneNumber *string `xml:"DriverPhoneNumber,omitempty" json:"DriverPhoneNumber,omitempty"`
}

type PriceRRP struct {
	ProductId string `xml:"ProductId,omitempty" json:"ProductId,omitempty"`

	Name string `xml:"Name,omitempty" json:"Name,omitempty"`

	Article *string `xml:"Article,omitempty" json:"Article,omitempty"`

	Unit string `xml:"Unit,omitempty" json:"Unit,omitempty"`

	Price float32 `xml:"Price,omitempty" json:"Price,omitempty"`
}

type ToledoAPIPortType interface {
	Test(request *Test) (*TestResponse, error)

	TestContext(ctx context.Context, request *Test) (*TestResponse, error)

	ProductsGroupHierarchy(request *ProductsGroupHierarchy) (*ProductsGroupHierarchyResponse, error)

	ProductsGroupHierarchyContext(ctx context.Context, request *ProductsGroupHierarchy) (*ProductsGroupHierarchyResponse, error)

	Brands(request *Brands) (*BrandsResponse, error)

	BrandsContext(ctx context.Context, request *Brands) (*BrandsResponse, error)

	ProductsInfo(request *ProductsInfo) (*ProductsInfoResponse, error)

	ProductsInfoContext(ctx context.Context, request *ProductsInfo) (*ProductsInfoResponse, error)

	PriceList(request *PriceList) (*PriceListResponse, error)

	PriceListContext(ctx context.Context, request *PriceList) (*PriceListResponse, error)

	GetSalesDocumentsInfo(request *GetSalesDocumentsInfo) (*GetSalesDocumentsInfoResponse, error)

	GetSalesDocumentsInfoContext(ctx context.Context, request *GetSalesDocumentsInfo) (*GetSalesDocumentsInfoResponse, error)

	CreateOrderDocument(request *CreateOrderDocument) (*CreateOrderDocumentResponse, error)

	CreateOrderDocumentContext(ctx context.Context, request *CreateOrderDocument) (*CreateOrderDocumentResponse, error)

	GetOrderDocument(request *GetOrderDocument) (*GetOrderDocumentResponse, error)

	GetOrderDocumentContext(ctx context.Context, request *GetOrderDocument) (*GetOrderDocumentResponse, error)

	ChangeOrderDocument(request *ChangeOrderDocument) (*ChangeOrderDocumentResponse, error)

	ChangeOrderDocumentContext(ctx context.Context, request *ChangeOrderDocument) (*ChangeOrderDocumentResponse, error)

	GetAddressInfo(request *GetAddressInfo) (*GetAddressInfoResponse, error)

	GetAddressInfoContext(ctx context.Context, request *GetAddressInfo) (*GetAddressInfoResponse, error)

	ReconciliationAct(request *ReconciliationAct) (*ReconciliationActResponse, error)

	ReconciliationActContext(ctx context.Context, request *ReconciliationAct) (*ReconciliationActResponse, error)

	GetPriceRRP(request *GetPriceRRP) (*GetPriceRRPResponse, error)

	GetPriceRRPContext(ctx context.Context, request *GetPriceRRP) (*GetPriceRRPResponse, error)
}

type toledoAPIPortType struct {
	client *soap.Client
}

func NewToledoAPIPortType(client *soap.Client) ToledoAPIPortType {
	return &toledoAPIPortType{
		client: client,
	}
}

func (service *toledoAPIPortType) TestContext(ctx context.Context, request *Test) (*TestResponse, error) {
	response := new(TestResponse)
	err := service.client.CallContext(ctx, "http://www.toledo24.ru/webservices/ToledoAPI#ToledoAPI:Test", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *toledoAPIPortType) Test(request *Test) (*TestResponse, error) {
	return service.TestContext(
		context.Background(),
		request,
	)
}

func (service *toledoAPIPortType) ProductsGroupHierarchyContext(ctx context.Context, request *ProductsGroupHierarchy) (*ProductsGroupHierarchyResponse, error) {
	response := new(ProductsGroupHierarchyResponse)
	err := service.client.CallContext(ctx, "http://www.toledo24.ru/webservices/ToledoAPI#ToledoAPI:ProductsGroupHierarchy", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *toledoAPIPortType) ProductsGroupHierarchy(request *ProductsGroupHierarchy) (*ProductsGroupHierarchyResponse, error) {
	return service.ProductsGroupHierarchyContext(
		context.Background(),
		request,
	)
}

func (service *toledoAPIPortType) BrandsContext(ctx context.Context, request *Brands) (*BrandsResponse, error) {
	response := new(BrandsResponse)
	err := service.client.CallContext(ctx, "http://www.toledo24.ru/webservices/ToledoAPI#ToledoAPI:Brands", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *toledoAPIPortType) Brands(request *Brands) (*BrandsResponse, error) {
	return service.BrandsContext(
		context.Background(),
		request,
	)
}

func (service *toledoAPIPortType) ProductsInfoContext(ctx context.Context, request *ProductsInfo) (*ProductsInfoResponse, error) {
	response := new(ProductsInfoResponse)
	err := service.client.CallContext(ctx, "http://www.toledo24.ru/webservices/ToledoAPI#ToledoAPI:ProductsInfo", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *toledoAPIPortType) ProductsInfo(request *ProductsInfo) (*ProductsInfoResponse, error) {
	return service.ProductsInfoContext(
		context.Background(),
		request,
	)
}

func (service *toledoAPIPortType) PriceListContext(ctx context.Context, request *PriceList) (*PriceListResponse, error) {
	response := new(PriceListResponse)
	err := service.client.CallContext(ctx, "http://www.toledo24.ru/webservices/ToledoAPI#ToledoAPI:PriceList", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *toledoAPIPortType) PriceList(request *PriceList) (*PriceListResponse, error) {
	return service.PriceListContext(
		context.Background(),
		request,
	)
}

func (service *toledoAPIPortType) GetSalesDocumentsInfoContext(ctx context.Context, request *GetSalesDocumentsInfo) (*GetSalesDocumentsInfoResponse, error) {
	response := new(GetSalesDocumentsInfoResponse)
	err := service.client.CallContext(ctx, "http://www.toledo24.ru/webservices/ToledoAPI#ToledoAPI:GetSalesDocumentsInfo", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *toledoAPIPortType) GetSalesDocumentsInfo(request *GetSalesDocumentsInfo) (*GetSalesDocumentsInfoResponse, error) {
	return service.GetSalesDocumentsInfoContext(
		context.Background(),
		request,
	)
}

func (service *toledoAPIPortType) CreateOrderDocumentContext(ctx context.Context, request *CreateOrderDocument) (*CreateOrderDocumentResponse, error) {
	response := new(CreateOrderDocumentResponse)
	err := service.client.CallContext(ctx, "http://www.toledo24.ru/webservices/ToledoAPI#ToledoAPI:CreateOrderDocument", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *toledoAPIPortType) CreateOrderDocument(request *CreateOrderDocument) (*CreateOrderDocumentResponse, error) {
	return service.CreateOrderDocumentContext(
		context.Background(),
		request,
	)
}

func (service *toledoAPIPortType) GetOrderDocumentContext(ctx context.Context, request *GetOrderDocument) (*GetOrderDocumentResponse, error) {
	response := new(GetOrderDocumentResponse)
	err := service.client.CallContext(ctx, "http://www.toledo24.ru/webservices/ToledoAPI#ToledoAPI:GetOrderDocument", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *toledoAPIPortType) GetOrderDocument(request *GetOrderDocument) (*GetOrderDocumentResponse, error) {
	return service.GetOrderDocumentContext(
		context.Background(),
		request,
	)
}

func (service *toledoAPIPortType) ChangeOrderDocumentContext(ctx context.Context, request *ChangeOrderDocument) (*ChangeOrderDocumentResponse, error) {
	response := new(ChangeOrderDocumentResponse)
	err := service.client.CallContext(ctx, "http://www.toledo24.ru/webservices/ToledoAPI#ToledoAPI:ChangeOrderDocument", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *toledoAPIPortType) ChangeOrderDocument(request *ChangeOrderDocument) (*ChangeOrderDocumentResponse, error) {
	return service.ChangeOrderDocumentContext(
		context.Background(),
		request,
	)
}

func (service *toledoAPIPortType) GetAddressInfoContext(ctx context.Context, request *GetAddressInfo) (*GetAddressInfoResponse, error) {
	response := new(GetAddressInfoResponse)
	err := service.client.CallContext(ctx, "http://www.toledo24.ru/webservices/ToledoAPI#ToledoAPI:GetAddressInfo", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *toledoAPIPortType) GetAddressInfo(request *GetAddressInfo) (*GetAddressInfoResponse, error) {
	return service.GetAddressInfoContext(
		context.Background(),
		request,
	)
}

func (service *toledoAPIPortType) ReconciliationActContext(ctx context.Context, request *ReconciliationAct) (*ReconciliationActResponse, error) {
	response := new(ReconciliationActResponse)
	err := service.client.CallContext(ctx, "http://www.toledo24.ru/webservices/ToledoAPI#ToledoAPI:ReconciliationAct", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *toledoAPIPortType) ReconciliationAct(request *ReconciliationAct) (*ReconciliationActResponse, error) {
	return service.ReconciliationActContext(
		context.Background(),
		request,
	)
}

func (service *toledoAPIPortType) GetPriceRRPContext(ctx context.Context, request *GetPriceRRP) (*GetPriceRRPResponse, error) {
	response := new(GetPriceRRPResponse)
	err := service.client.CallContext(ctx, "http://www.toledo24.ru/webservices/ToledoAPI#ToledoAPI:GetPriceRRP", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *toledoAPIPortType) GetPriceRRP(request *GetPriceRRP) (*GetPriceRRPResponse, error) {
	return service.GetPriceRRPContext(
		context.Background(),
		request,
	)
}
